getwd()
ggplot()
library(ggplot2)
require(ggplot2) == F
print("la libreria existe")
if(require(ggplot2)){
print("la libreria existe")
}
if(require("aaaaa")){
print("la libreria existe")
}else{
print("La libreria no esta instalada")
}
install.packages(c("ggplot2", "raster", "dplyr"))
diamons
diamonds
library(ggplot2)
diamonds
qplot(x, y, data = diamonds)
qplot
qplot(mpg, wt, data = mtcars)
qplot(resid(mod), fitted(mod))
mod <- lm(mpg ~ wt, data = mtcars)
qplot(resid(mod), fitted(mod))
f <- function() {
a <- 1:10
b <- a ^ 2
qplot(a, b)
}
f()
dem = raster("E:/2020/uni/process_ch_max/1/ra_dem.tif")
library(raster)
dem = raster("E:/2020/uni/process_ch_max/1/ra_dem.tif")
dem
plot(dem)
plot(dem[dem > 2000])
dem = dem[dem > 2000]
plot(dem)
dem
dem = raster("E:/2020/uni/process_ch_max/1/ra_dem.tif")
dem[dem > 2000]
dem[dem < 2000] = NA
plot(dem)
library(tidyverse)
library(rgbif)
library(tidyverse)
install.packages("tidyverse")
install.packages("rgbif")
library(tidyverse)
library(rgbif)
library(tidyverse)
library(rgbif)
tidyverse_conflicts()
# get the database id ("key") for the Scottish Crossbill
speciesKey <- name_backbone('Loxia scotica')$speciesKey
speciesKey
name_backbone
name_backbone('Loxia scotica')
speciesKey <- name_backbone('Loxia scotica')$speciesKey
speciesKey
gbif_response <- occ_search(
scientificName = "Loxia scotica", country = "GB",
hasCoordinate = TRUE, hasGeospatialIssue = FALSE,
limit = 9999)
gbif_response
# backup to reduce API load
write_rds(x = gbif_response, path = here::here('gbif_occs_loxsco.rds'))
library(lubridate)
library(lubridate)
birds_clean <- gbif_response$data %>%
# get decade of record from eventDate
mutate(decade = eventDate %>% ymd_hms() %>% round_date("10y") %>% year() %>% as.numeric()) %>%
# clean data using metadata filters
filter(
# only creative commons license records
str_detect(license, "http://creativecommons.org/") &
# only records with no issues
issues == "" &
# no records before 1965
decade >= 1970 &
# no records after 2015 (there is not a lot of data yet)
decade < 2020) %>%
# retain only relevant variables
select(decimalLongitude, decimalLatitude, decade) %>% arrange(decade)
birds_clean
birds_nested <- birds_clean %>%
# define the nesting index
group_by(decade) %>%
# aggregate data in each group
nest()
birds_nested
glimpse(birds_nested)
birds_nested
# last pre-processing step
df_modelling <- df_nested %>%
# get into modelling format
unnest() %>%
# caret requires a factorial response variable for classification
mutate(presence = case_when(
presence == 1 ~ "presence",
presence == 0 ~ "absence") %>%
factor()) %>%
# drop all observations with NA variables
na.omit()
# create a training set for the model build
df_train <- df_modelling %>%
# true temporal split as holdout
filter(decade != "2010") %>%
# drop decade, it's not needed anymore
dplyr::select(-decade)
# same steps for test set
df_test <- df_modelling %>%
filter(decade == "2010") %>%
dplyr::select(-decade)
df_modelling
df_modelling <- df_nested %>%
# get into modelling format
unnest() %>%
# caret requires a factorial response variable for classification
mutate(presence = case_when(
presence == 1 ~ "presence",
presence == 0 ~ "absence") %>%
factor()) %>%
# drop all observations with NA variables
na.omit()
df_nested
Nile
install.packages(c("forecast", "ggfortify", "tseries"))
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(cowplot)
library('ggplot2')
library('forecast')
library('tseries')
library('ggthemes')
library('ggfortify')
source("knitr_header.R")
install.packages(c("climdex.pcic", "PCICt", "rnoaa"))
library(raster)
library(sp)
library(rgdal)
library(ggplot2)
library(ggmap)
library(dplyr)
library(tidyr)
library(maps)
library(scales)
# New Packages
library(rnoaa)
library(climdex.pcic)
library(zoo)
library(reshape2)
library(broom)
library(raster)
library(sp)
library(rgdal)
library(ggplot2)
library(ggmap)
library(dplyr)
library(tidyr)
library(maps)
library(scales)
# New Packages
library(rnoaa)
library(climdex.pcic)
library(zoo)
library(reshape2)
library(broom)
knitr::opts_chunk$set(cache=T,
fig.width=7,
fig.height=4,
dpi=300,
dev="png",
tidy=FALSE,
tidy.opts=list(width.cutoff=75))
options(knitr.duplicate.label = 'allow')
presentation_theme <- ggplot2::theme_grey()+
ggplot2::theme(
text = ggplot2::element_text(size = 25, colour = "black"))
ggplot2::theme_set(presentation_theme)
## Purl to a  .R version
input  = knitr::current_input()  # filename of input document
output = file.path("scripts",paste(tools::file_path_sans_ext(input),
'R', sep = '.'))
output_nocomment = file.path("scripts",paste0(tools::file_path_sans_ext(input),
'_nocomments.R'))
knitr::purl(input,output,documentation=2,quiet=F,envir=new.env())
knitr::purl(input,output,documentation=2,quiet=F,envir=new.env())
fullinput=file.path("scripts",input)
file.copy(input,fullinput) # also copy .Rmd to script folder.
presframe=function(path=rmarkdown::metadata$presentation,prefix="presentations"){
paste0("
<div class='extraswell'>
<button data-toggle='collapse' class='btn btn-link' data-target='#pres'>View Presentation </button>      [Open presentation in a new tab](",file.path(prefix,path),"){target='_blank'}
<div id='pres' class='collapse'>
<div class='embed-responsive embed-responsive-16by9'>
<iframe class='embed-responsive-item' src='",file.path(prefix,path),
"' allowfullscreen></iframe>
_Click on presentation and then use the space bar to advance to the next slide
or escape key to show an overview._
</div>
</div>
</div>
")}
output_table=function(){
paste(
"| [<i class='fas fa-code fa-2x' aria-hidden='true'></i><br>  R Script](",output_nocomment,") | [<i class='fa fa-file-code-o fa-2x'></i> <br> Commented R Script](",output,") | [<i class='far fa-file-alt fa-2x'></i> <br>  Rmd Script](",fullinput,")|
|:--:|:-:|:-:|",collapse="")}
as.Date('2020/01/01', format="%Y/%b/%d")
format(as.Date('2020/01/01'), "%Y/%b/%d")
format(as.Date('2020/01/01'), "%Y/%M/%d")
format(as.Date('2020/01/01'), "%Y/%m/%d")
format(as.Date('2020-01-01'), "%Y/%m/%d")
as.Date('01-01-2020')
format(as.Date('01-01-2020'), "%Y/%m/%d")
format(as.Date("2016-01-01"), "%Y %b %a %d")
as.Date("2016-01-01")
as.Date('01-01-2020')
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(cowplot)
as.Date('01-01-2020')
format(as.Date('01-01-2020'), "%d-%b-%Y")
as.Date('01-01-2020', "%d-%b-%Y")
as.Date('01-01-2020', origin = "%d-%b-%Y")
as.Date('01-01-2020', format="%d-%b-%Y")
as.Date('01-01-2020', format="%d-%m-%Y")
c('01-01-2020', '02-01-2020')
vector <- c('01-01-2020', '02-01-2020')
format(vector, "%d-%m-%Y")
as.Date(vector, format="%d-%m-%Y")
Nile
